# Production arguments passed to both containers
x-prod-args: &prod-args
  # Port that both servers will run production on
  PRODUCTION_PORT: &prod-port 80

x-db-info: &db-args
  POSTGRES_PASSWORD: kTtH68Ptj17iGcsaK1EB
  POSTGRES_USER: postgres
  POSTGRES_DB: postgres

# Port and URL for the DB
x-db-loc: &db-loc
  POSTGRES_CONTAINER: team-mqp-prod.ctzj5mykyp9v.us-east-1.rds.amazonaws.com
  POSTGRES_PORT: &pg-port "5432"

# Health check for all processes
x-health-check: &health-check
  interval: 30s
  timeout: 30s
  retries: 3

# Running containers
services:
  # Traefik container, used for production routing. ALL requests will automatically be routed through here
  # (hence why this is the only service with a "ports") to their appropriate destination based on the routing rules
  traefik:
    image: traefik:latest
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Expose the standard HTTP port, have it automatically redirect to https
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      # This is what will actually be used
      - "--entrypoints.websecure.address=:443"

      # Auto-certificate generation parameters
      - "--certificatesresolvers.letsencrypt.acme.email=irwright@wpi.edu"
      - "--certificatesresolvers.letsencrypt.acme.storage=acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=websecure"
    # Everything enters through Traefik, so this exposes the environment
    ports:
      - "80:80"
      - "443:443"
    # Traefik requirement
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Mount the certificate, so that we don't try to renew the cert every time we start up
      - acme_cert:/etc/traefik/acme
    restart: always
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Frontend (UI)
  frontend:
    # This is the exposed production port, so that Traefik routing can access it
    expose:
      - *prod-port
    # Use the standard Dockerfile
    build:
      # Taken from our github repo
      context: .
      args:
        <<: *prod-args
      # Use the prod-frontend stage
      target: prod-frontend
      # Traefik labels
      labels:
        - "traefik.enable=true"

        # The 443 entrypoint is the actual site
        - "traefik.http.routers.frontend-https.entrypoints=websecure"
        - "traefik.http.routers.frontend-https.rule=Host(`ec2-3-82-199-248.compute-1.amazonaws.com`)"
        - "traefik.http.routers.frontend-https.tls=true"

        # Despite the "loadbalancer" naming, this just describes what port this container exposes
        - "traefik.http.services.frontend-https.loadbalancer.server.port=80"
    image: irwright13/softeng-mqp:frontend
    restart: always
    healthcheck:
      *health-check

  # Backend (API)
  backend:
    # This is the exposed production port, so that Traefik routing can access it
    expose:
      - *prod-port
    # Use the standard Dockerfile
    build:
      # Taken from our github repo
      context: .
      args:
        # Ignore the warnings, this just merges those three
        <<: [*prod-args, *db-args, *db-loc]
      # This time, build the backend
      target: prod-backend
    # This is the same as above, except everywhere that it said frontend is now backend, and
    # it requires the /api prefix on everything
    labels:
      - "traefik.enable=true"

      # The 443 entrypoint is the actual site
      - "traefik.http.routers.backend-https.entrypoints=websecure"
      - "traefik.http.routers.backend-https.rule=Host(`ec2-3-82-199-248.compute-1.amazonaws.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-https.tls=true"

      # Despite the "loadbalancer" naming, this just describes what port this container exposes
      - "traefik.http.services.backend-https.loadbalancer.server.port=80"
    image: irwright13/softeng-mqp:backend
    restart: always
    healthcheck:
      *health-check
volumes:
  acme_cert: